I thouhgt it would be nice to have mpd (music player daemon) running on the
Atom core, with some USB DAC/Codec as output.

Getting mpd to run is relatively easy, but playing audio via USB isn't.

First attempt was to use ALSA by providing alsa-lib (easy, contained in buildroot)
and installing the missing kernel modules from AVM source.
The latter part would not be a problem is i had the excat kernel configuration
AVM was using, but unfortunately they don't provide it. With guessing, the best i 
got was to get the modules loaded and the USB DAC detected by aplay.
But actually playing something crashed the kernel ..

Plan B is to use libusb to access the USB DAC from userland. I found a rather old
and obviously abandoned library (libmaru) that does the job.
It provides a sample tool that dumps everythin on stdin to the first found audio device.
As a first step, this command is configured to be used by the mpd pipe driver.


To build
--------
- Generate buildroot in packages/x86/buildroot:
    cd packages/x86/buildroot; make

- Compile mpd:
    cd packages/x86/mpd; make

- Compile libmaru:
    cd packages/x86/libmaru; make

- Pack everything:
    cd packages/x86/ffritz; make

.. and copy packages/x86/ffritz.tar.gz to the box (/var/media/ftp)

To start mpd
------------
- Unpack ffritz.tar.gz on the box in /var/media/ftp
- Call ffritz/bin/runmpd on atom (or via rpc on arm)

It should now be possible to connect to mpd using some mpd client via the atom IP (xx.xx.xx.254). 
Music database is /var/media/ftp/Musik by default. From there its possible to create nfs symlinks 
or mounts to somewhere else ..

Integration details
-------------------
- All required software is installed in /var/media/ftp/ffritz:
    lib	    -   Contains all required shared libraries
    bin	    -   All tools/commands Commands
	runmpd		- Starts mpd with our config file (see below)
	sndlist		- A tiniy tool to list all USB sound interfaces. You might have to tune
			  mpd.conf and adjust the sample rate according to the detected device.
	usbplay		- Reads from stdin and outputs to device.
			  Parameters are
				-d <num>	: Device number (first by default)
				-s <stream>	: Stream number
				-v <volume>	: Default output volume
				-V volfile      : volfile is polled (1/sec) in the play loop.
						  Its content is interpreted as volume level
						  (0..100) to be applied to the DAC.
	usb_pipe_play	- Executed by mpd pipe driver to output sound via usbplay.	

    etc	    -	Config files:
	ffplay-env.sh	-   Sourced by scripts to set environment correctly, esp.
			    LD_LIBRARY_PATH for the l;ib directory
	mpd.conf	-   mod configuration file used

- runmpd redirects the HOME directory to /var/media/ftp/ffritz/.mpd. Here is where mpd creates
    all its files (database, log, ...)

- The default output is a pipe driver which calls /var/media/ftp/ffritz/bin/usb_pipe_play. This
    script calls /var/media/ftp/ffritz/bin/test_enum (or usbplay), which is the libmaru binary
    that forwards traffic to the first USB DAC.

- Volume control
    The mpd pipe output driver is patched so that it supports the "volume_file" property.
    If set, volume changes (via mixer_type "hardware") are written to this file. 

    The pipe command has a change to read this file and adjust the hardware volume level.
    usbplay will do just this (see above).

    Not very elegant, but it works.

TODO
----
- Do not run mpd as root, create a dedicated user (on demand at startup)
- Write a box startup script (probably only on arm) that automatically starts mpd on atom.
- Add (sh)airplay
