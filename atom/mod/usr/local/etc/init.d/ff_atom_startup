#!/bin/sh
#
# Startup preparations for ffritz on atom.
#
#	- creating/transferring passwords and users
#	- creating dropbear host keys if required
#	- transferring dropbear host keys from persistent memory
#	- transferring roots .ssh from persistent memory
#	
#

FFLOG=/var/log/ffritz.log
touch $FFLOG
chmod 666 $FFLOG

mach=`uname -m`

echo ffritz_startup on $mach >> $FFLOG

rundir=/usr/local

CP=/usr/local/bin/rpc_cp

# Create ffritz user/group on both arm and atom
# Audio group required to allow access to usb devices
#
grep ffritz /etc/passwd >/dev/null || echo ffritz:x:8000:8000:ffritz user:/var/media/ftp/ffritz:/bin/sh >> /etc/passwd
grep ffritz /etc/group >/dev/null  || echo ffritz:x:8000: >> /etc/group
grep usb /etc/group >/dev/null     || echo usb:x:8001:ffritz >> /etc/group

## Transfer passwords from arm
#
$CP /etc/shadow /var/tmp/shadow

## Create dummy shadow entry for ffritz so that it's possible to 
# assign a login
#
grep ffritz /etc/shadow >/dev/null  || echo ffritz:x:1:0:99999:7::: >> /etc/shadow

## transfer dropbear data from nvram
#
rm -rf /var/tmp/dropbear
mkdir -p /var/tmp/dropbear
chmod 700 /var/tmp/dropbear

rpc test -d /nvram/dropbear_x86 || rpc mkdir /nvram/dropbear_x86 && rpc chmod 700 /nvram/dropbear_x86
$CP -r /nvram/dropbear_x86 /var/tmp/dropbear

# check for presence of keys. If required, create them on the arm (don't know how to push a file there) and
# copy them to here.
#
for key in rsa dss ecdsa; do
	if [ ! -f /var/tmp/dropbear/dropbear_${key}_host_key ]; then
		echo creating /var/tmp/dropbear/dropbear_${key}_host_key >> $FFLOG
		rpc /usr/local/bin/dropbearkey -t $key -f /nvram/dropbear_x86/dropbear_${key}_host_key || echo dropbearkey failed >> $FFLOG
		$CP /nvram/dropbear_x86/dropbear_${key}_host_key /var/tmp/dropbear
	fi
done

# copy roots ssh stuff
#
rpc test -d /nvram/root-ssh_x86 || rpc mkdir /nvram/root-ssh_x86 && rpc chmod 700 /nvram/root-ssh_x86
mkdir -p /var/tmp/root-ssh
chmod 700 /var/tmp/root-ssh
$CP -r /nvram/root-ssh_x86 /var/tmp/root-ssh

# Start services
#
(
mkdir -p /var/run/mpd
chown ffritz /var/run/mpd

# Create/check users/paths
#
$rundir/etc/mkusers

# Run user mounts
#
if [ -f /var/media/ftp/ffritz/.mtab ]; then
    $rundir/etc/usrmount /var/media/ftp/ffritz/.mtab
fi

# A log rotator
#
nohup $rundir/etc/fflogrotate >/dev/null&

# run dropbear
#
if [ -x $rundir/bin/dropbear -a ! -f /var/media/ftp/.skip_dropbear ]; then
    if [ -f /var/run/dropbear.pid ]; then
	echo dropbear running, pid `cat /var/run/dropbear.pid`
    else
    	echo Starting dropbear 
    	$rundir/bin/dropbear 2>/dev/console || echo dropbear startup failed 
    fi
else
    echo dropbear not started 
fi

# run shairport
#
if [ -x $rundir/etc/run_shairport -a ! -f /var/media/ftp/.skip_shairport ]; then
    echo Starting shairport 
    $rundir/etc/run_shairport
else
    echo shairport skipped 
fi

# run mpd
#
if [ -x $rundir/etc/runmpd -a ! -f /var/media/ftp/.skip_mpd ]; then
    echo Starting mpd 
    $rundir/etc/runmpd
else
    echo mpd not started 
fi

# and lircd
#
if [ -x $rundir/etc/run_lircd -a ! -f /var/media/ftp/.skip_lircd ]; then
    echo Starting lircd 
    $rundir/etc/run_lircd
else
    echo lircd not started 
fi

# and openvpn
#
if [ -x $rundir/etc/run_openvpn -a -r /var/tmp/root-ssh/openvpn/openvpn.conf ]; then
	echo starting OpenVPN
	$rundir/etc/run_openvpn
else
	echo OpenVPN not started
fi

) | tee -a $FFLOG 2>&1 &

