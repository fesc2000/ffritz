From 37ad5be8941bef2f857c3b1ce7b23e9fd4e0de20 Mon Sep 17 00:00:00 2001
From: fesc2000 <fesc2000@gmail.com>
Date: Sun, 22 Mar 2020 05:15:43 -0400
Subject: [PATCH 1/2] Add volume file "mixer" plugin.

---
 src/mixer/MixerList.hxx                  |   1 +
 src/mixer/plugins/VolfileMixerPlugin.cxx | 120 +++++++++++++++++++++++++++++++
 src/mixer/plugins/meson.build            |   2 +
 src/output/plugins/FifoOutputPlugin.cxx  |   3 +-
 src/output/plugins/PipeOutputPlugin.cxx  |   4 +-
 5 files changed, 128 insertions(+), 2 deletions(-)
 create mode 100644 src/mixer/plugins/VolfileMixerPlugin.cxx

diff --git a/src/mixer/MixerList.hxx b/src/mixer/MixerList.hxx
index e62604ce2..2a28426f3 100644
--- a/src/mixer/MixerList.hxx
+++ b/src/mixer/MixerList.hxx
@@ -27,6 +27,7 @@
 
 struct MixerPlugin;
 
+extern const MixerPlugin volfile_mixer_plugin;
 extern const MixerPlugin null_mixer_plugin;
 extern const MixerPlugin software_mixer_plugin;
 extern const MixerPlugin alsa_mixer_plugin;
diff --git a/src/mixer/plugins/VolfileMixerPlugin.cxx b/src/mixer/plugins/VolfileMixerPlugin.cxx
new file mode 100644
index 000000000..3b0ffcb82
--- /dev/null
+++ b/src/mixer/plugins/VolfileMixerPlugin.cxx
@@ -0,0 +1,120 @@
+/*
+ * Copyright 2003-2018 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config/Block.hxx"
+#include "mixer/MixerInternal.hxx"
+#include "util/Domain.hxx"
+#include "Log.hxx"
+#include <string.h>
+
+static constexpr Domain volfile_mixer_domain("volfile_mixer");
+
+class VolfileMixer final : public Mixer {
+	/**
+	 * The current volume in percent (0..100).
+	 */
+	unsigned last_volume;
+
+	const char *volfile = "";
+
+public:
+	VolfileMixer(MixerListener &_listener)
+		:Mixer(volfile_mixer_plugin, _listener),
+		 last_volume(75)
+	{
+	}
+
+	/* virtual methods from class Mixer */
+	void Open() override {
+	    	last_volume = GetVolume ();
+	}
+
+	void Close() noexcept override {
+	}
+
+	int GetVolume() override {
+		int vol;
+
+		if (strlen(volfile) == 0)
+			return last_volume;
+
+		FILE *fd = fopen (volfile, "r");
+		if (fd == NULL)
+		{
+			FormatError (volfile_mixer_domain, "Failed to open volume control %s %d", volfile, errno);
+			return last_volume;
+	    	}
+
+		if (fscanf (fd, "%d", &vol) != 1)
+			return last_volume;
+
+	    	fclose (fd);
+
+	    	return (last_volume = vol);
+	};
+
+	void SetVolume(unsigned _volume) override {
+	    	char out[20];
+
+	    	if (_volume == last_volume)
+			return;
+
+	    	if (strlen(volfile) == 0)
+			return;
+
+	    	FILE *fd = fopen (volfile, "w+");
+	    	if (fd == NULL)
+	    	{
+			FormatError (volfile_mixer_domain, "Failed to open volume control %s", volfile);
+			return;
+	    	}
+
+		sprintf (out, "%d", _volume);
+	    	if (fwrite (out, strlen(out), 1, fd) == 0)
+	    	{
+			FormatError (volfile_mixer_domain, "Failed to write volume control %s", volfile);
+			return;
+	    	}
+
+	    	last_volume = _volume;
+
+	    	fclose (fd);
+	}
+
+	void Configure(const ConfigBlock &block)
+	{
+		volfile = block.GetBlockValue("volume_file", "");
+	}
+};
+
+static Mixer *
+volfile_mixer_init(gcc_unused EventLoop &event_loop,
+		gcc_unused AudioOutput &ao,
+		MixerListener &listener,
+		const ConfigBlock &block)
+{
+	VolfileMixer *mixer = new VolfileMixer(listener);
+	mixer->Configure(block);
+	return mixer;
+}
+
+const MixerPlugin volfile_mixer_plugin = {
+	volfile_mixer_init,
+	true,
+};
diff --git a/src/mixer/plugins/meson.build b/src/mixer/plugins/meson.build
index eda7c8e2a..bb70828b8 100644
--- a/src/mixer/plugins/meson.build
+++ b/src/mixer/plugins/meson.build
@@ -34,6 +34,8 @@ if is_windows
   mixer_plugins_sources += 'WinmmMixerPlugin.cxx'
 endif
 
+mixer_plugins_sources += 'VolfileMixerPlugin.cxx'
+
 mixer_plugins = static_library(
   'mixer_plugins',
   mixer_plugins_sources,
diff --git a/src/output/plugins/FifoOutputPlugin.cxx b/src/output/plugins/FifoOutputPlugin.cxx
index e7c688357..18e24548b 100644
--- a/src/output/plugins/FifoOutputPlugin.cxx
+++ b/src/output/plugins/FifoOutputPlugin.cxx
@@ -27,6 +27,7 @@
 #include "util/RuntimeError.hxx"
 #include "Log.hxx"
 #include "open.h"
+#include "mixer/MixerList.hxx"
 
 #include <sys/stat.h>
 #include <errno.h>
@@ -236,5 +237,5 @@ const struct AudioOutputPlugin fifo_output_plugin = {
 	"fifo",
 	nullptr,
 	&FifoOutput::Create,
-	nullptr,
+	&volfile_mixer_plugin,
 };
diff --git a/src/output/plugins/PipeOutputPlugin.cxx b/src/output/plugins/PipeOutputPlugin.cxx
index 2ad3d5ff6..e065f9584 100644
--- a/src/output/plugins/PipeOutputPlugin.cxx
+++ b/src/output/plugins/PipeOutputPlugin.cxx
@@ -20,6 +20,8 @@
 #include "PipeOutputPlugin.hxx"
 #include "../OutputAPI.hxx"
 #include "system/Error.hxx"
+#include "mixer/MixerList.hxx"
+
 
 #include <string>
 #include <stdexcept>
@@ -78,5 +80,5 @@ const struct AudioOutputPlugin pipe_output_plugin = {
 	"pipe",
 	nullptr,
 	&PipeOutput::Create,
-	nullptr,
+	&volfile_mixer_plugin,
 };
-- 
2.11.0

