#!/bin/sh
# Xfeature:getconfig
#
# (de)construct a chroot'able filesystem out of a buildroot
#
. /usr/local/etc/ffritz-env.sh || exit 1

BR_DIR=/var/tmp/br
BR_OVERLAY=$NVRAM/rootfs-overlay
BR_ROOT=/usr/local/buildroot
BR_CONF=$NVRAM/ffbuildroot.conf
BR_CONF_ACTIVE=/tmp/ffbuildroot.conf
BR_VAR=/tmp/ffbrvar

if [ ! -z $2 ]; then
	BR_CONF=$2
fi

ismounted()
{
	dir=`readlink -f $1`

	while read line; do
		set $line
		if [ "$dir" = "$2" ]; then
		    	return 0
		fi
	done < /proc/mounts

	return 1
}

# Mount table for rootfs
# (RAM version, rootfs is RO)
mtab_ram()
{
	echo / REDIR $BR_ROOT
	echo /dev devtmpfs
	echo /etc NVRAM
	echo /proc proc
	echo /root NVRAM
	echo /run tmpfs
	echo /sys sysfs
	echo /tmp tmpfs
	echo /var COW $BR_VAR
	echo /var/media/ftp REDIR /var/media/ftp
}

# Mount table for rootfs, using (verified) USB storage $1 as overlay
mtab_flash()
{
	echo / COW $1
	echo /dev devtmpfs
	echo /proc proc
	echo /run tmpfs
	echo /sys sysfs
	echo /tmp tmpfs
	echo /var/media/ftp REDIR /var/media/ftp
}

mtab()
{
	if [ "$BR_USER_OVERLAY" != "" ]; then
		if [ -d $BR_USER_OVERLAY ]; then
			mtab_flash $BR_USER_OVERLAY
		else
			echo user overlay $BR_USER_OVERLAY does not exist 1>&2
			exit 1
		fi
	else
		mtab_ram
	fi
}

# Reverse mount table
mtab_r()
{
	mtab | grep -n "" |sort -nr|sed -e 's/^[0-9]*://'
}

umount_all()
{
	for loop in 1 2; do
		mtab_r | while read line; do
			set $line

			ismounted $BR_DIR/$1 && umount $BR_DIR/$1
		done
	done
}

abort()
{
	echo $*
	umount_all
	umount_all
	exit 1
}

# kill all chrooted processes
# arguments passed to kill(2)
#
kill_all()
{
	sig=$1

	cd /proc
	pids=
	for p in [0-9]*; do
		ffd_service_name=
		if [ -d $p/root -a "`readlink -f $p/root`" = $BR_DIR ]; then
#			eval `grep ffd_service_name $p/environ`
			pids="$pids $p"
			
#			if [ "$ffd_service_name" != "" ]; then
#				ffdaemon -K $ffd_service_name
#			fi
		fi
	done

	if [ "$pids" != "" ]; then
		echo "killing $sig PIDs using $BR_DIR: $pids"
		kill $sig $pids
		sleep 2
	fi
}

######### Main

if [ "x$1" = "xstop" ]; then

	if [ -f $BR_CONF_ACTIVE ]; then
		echo reading config from $BR_CONF_ACTIVE
		. $BR_CONF_ACTIVE
	elif [ -f $BR_CONF ]; then
		echo reading config from $BR_CONF
		. $BR_CONF
	fi

	sleep 2
	kill_all
	kill_all -9

	umount_all

	rm -f $BR_CONF_ACTIVE
	exit 0
fi

if [ "x$1" = "xinfo" ]; then
	if [ -r $BR_CONF_ACTIVE ]; then
		echo STATUS=on
	else
		echo STATUS=off
	fi
	exit 0
fi

if [ "x$1" = "xgetconfig" ]; then
	if [ -r $NVRAM/ffbuildroot.conf ]; then
		echo "# Data read from old style ffbuildroot.conf:"
		cat $NVRAM/ffbuildroot.conf
	else
		echo "# Options for buildroot service:"
		echo "# BR_USER_OVERLAY: Users root filesystem overlay (e.g. below /var/media/ftp)"
	fi

	exit 0
fi

if [ "x$1" != "xstart" ]; then
	exit 0
fi

### Start

if [ -f $BR_CONF_ACTIVE ]; then
	echo Service is already running or could not be stopped 1>&2
	exit 1
fi

# create default buildroot root overlay (in nvram)
#
mkdir -p $BR_OVERLAY || exit 1

mkdir -p $BR_VAR

# read configuration and store in active config so that stop
# does not use intermittent changes
#
if [ -f $BR_CONF ]; then
	echo reading config from $BR_CONF
	. $BR_CONF
	cp -f $BR_CONF $BR_CONF_ACTIVE
fi
touch $BR_CONF_ACTIVE

# Make sure users' overlay exists
#
if [ ! -d $BR_OVERLAY ]; then
	echo buildroot overlay does not exist: $BR_OVERLAY
	exit 1
fi

if [ ! -d $BR_ROOT ]; then
	echo buildroot root image directory does not exist: $BR_ROOT
	exit 1
fi

if [ -d $BR_OVERLAY/proc/self ]; then
	echo $BR_OVERLAY directory is not clean
	exit 1
fi

mkdir -p $BR_DIR

mtab | while read line; do
	set $line
	mkdir -p $BR_DIR/$1
	if [ "$2" = "NVRAM" ]; then
		mkdir -p $BR_OVERLAY/$1 || abort
		unionfs -o cow,dev,suid,allow_other,nonempty $BR_OVERLAY/$1=RW:$BR_ROOT/$1=RO $BR_DIR/$1 || abort
	elif [ "$2" = "COW" ]; then
		unionfs -o cow,dev,suid,allow_other,nonempty $3=RW:$BR_ROOT/$1=RO $BR_DIR/$1 || abort
	elif [ "$2" = "REDIR" ]; then
		mount --redir $3 $BR_DIR/$1
	else
		mount -t $2 none $BR_DIR/$1 
	fi
done

# prepare passwd for buildroot, preserving existing settings,
# but make sure ffritz and upmpdcli users are identical to
# host
grep -v -e ffritz -e upmpdcli $BR_DIR/etc/passwd > /tmp/.pwd
grep -e ffritz -e upmpdcli /etc/passwd >> /tmp/.pwd
mv /tmp/.pwd $BR_DIR/etc/passwd
