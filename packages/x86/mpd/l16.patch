diff -urN mpd-0.19.21/Makefile.am build/Makefile.am
--- mpd-0.19.21/Makefile.am	2017-01-27 09:03:42.982870006 +0100
+++ build/Makefile.am	2017-01-26 18:44:27.547417228 +0100
@@ -367,6 +367,7 @@
 	src/util/UTF8.cxx src/util/UTF8.hxx \
 	src/util/CharUtil.hxx \
 	src/util/NumberParser.hxx \
+	src/util/MimeType.cxx src/util/MimeType.hxx \
 	src/util/StringUtil.cxx src/util/StringUtil.hxx \
 	src/util/SplitString.cxx src/util/SplitString.hxx \
 	src/util/FormatString.cxx src/util/FormatString.hxx \
diff -urN mpd-0.19.21/src/decoder/plugins/PcmDecoderPlugin.cxx build/src/decoder/plugins/PcmDecoderPlugin.cxx
--- mpd-0.19.21/src/decoder/plugins/PcmDecoderPlugin.cxx	2016-11-17 22:20:17.000000000 +0100
+++ build/src/decoder/plugins/PcmDecoderPlugin.cxx	2017-01-26 19:13:42.778839445 +0100
@@ -22,9 +22,12 @@
 #include "../DecoderAPI.hxx"
 #include "input/InputStream.hxx"
 #include "util/Error.hxx"
+#include "system/ByteOrder.hxx"
 #include "util/ByteReverse.hxx"
 #include "util/StaticFifoBuffer.hxx"
 #include "Log.hxx"
+#include "util/MimeType.hxx"
+#include "util/NumberParser.hxx"
 
 #include <assert.h>
 #include <string.h>
@@ -48,15 +51,76 @@
 static void
 pcm_stream_decode(Decoder &decoder, InputStream &is)
 {
-	static constexpr AudioFormat audio_format = {
+	AudioFormat audio_format = {
 		44100,
 		SampleFormat::S16,
 		2,
 	};
 
 	const char *const mime = is.GetMimeType();
-	const bool reverse_endian = mime != nullptr &&
-		strcmp(mime, "audio/x-mpd-cdda-pcm-reverse") == 0;
+
+	const bool l16 = mime != nullptr &&
+		strcmp(mime, "audio/L16") == 0;
+	const bool is_float = mime != nullptr &&
+		strcmp(mime, "audio/L16/x-mpd-float") == 0;
+	if (l16 || is_float) {
+		audio_format.sample_rate = 0;
+		audio_format.channels = 1;
+	}
+
+	const bool reverse_endian = (l16 && IsLittleEndian()) ||
+		(mime != nullptr &&
+		 strcmp(mime, "audio/x-mpd-cdda-pcm-reverse") == 0);
+
+	{
+		const auto mime_parameters = ParseMimeTypeParameters(mime);
+
+		/* MIME type parameters according to RFC 2586 */
+		auto i = mime_parameters.find("rate");
+		if (i != mime_parameters.end()) {
+			const char *s = i->second.c_str();
+			char *endptr;
+			unsigned value = ParseUnsigned(s, &endptr);
+			if (endptr == s || *endptr != 0) {
+//				FormatWarning(pcm_decoder_domain,
+//					      "Failed to parse sample rate: %s",
+//					      s);
+				return;
+			}
+
+//			try {
+//				CheckSampleRate(value);
+//			} catch (const std::runtime_error &e) {
+//				LogError(e);
+//				return;
+//			}
+
+			audio_format.sample_rate = value;
+		}
+
+		i = mime_parameters.find("channels");
+		if (i != mime_parameters.end()) {
+			const char *s = i->second.c_str();
+			char *endptr;
+			unsigned value = ParseUnsigned(s, &endptr);
+			if (endptr == s || *endptr != 0) {
+//				FormatWarning(pcm_decoder_domain,
+//					      "Failed to parse sample rate: %s",
+//					      s);
+				return;
+			}
+
+//			try {
+//				CheckChannelCount(value);
+//			} catch (const std::runtime_error &e) {
+//				LogError(e);
+//				return;
+//			}
+
+			audio_format.channels = value;
+		}
+	}
+
 
 	const auto frame_size = audio_format.GetFrameSize();
 
@@ -109,6 +173,9 @@
 }
 
 static const char *const pcm_mime_types[] = {
+	/* RFC 2586 */
+	"audio/L16",
+
 	/* for streams obtained by the cdio_paranoia input plugin */
 	"audio/x-mpd-cdda-pcm",
 
diff -urN mpd-0.19.21/src/util/IterableSplitString.hxx build/src/util/IterableSplitString.hxx
--- /dev/null	2017-01-18 08:56:36.062209554 +0100
+++ build/src/util/IterableSplitString.hxx	2017-01-26 18:50:30.713634565 +0100
@@ -0,0 +1,123 @@
+/*
+ * Copyright (C) 2013-2016 Max Kellermann <max.kellermann@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef ITERABLE_SPLIT_STRING_HXX
+#define ITERABLE_SPLIT_STRING_HXX
+
+#include "StringView.hxx"
+
+#include <iterator>
+
+/**
+ * Split a string at a certain separator character into sub strings
+ * and allow iterating over the segments.
+ *
+ * Two consecutive separator characters result in an empty string.
+ *
+ * An empty input string returns one empty string.
+ */
+class IterableSplitString {
+	StringView s;
+
+	char separator;
+
+public:
+	constexpr IterableSplitString(StringView _s, char _separator)
+		:s(_s), separator(_separator) {}
+
+	class Iterator final {
+		friend class IterableSplitString;
+
+		StringView current, rest;
+
+		char separator;
+
+		Iterator(StringView _s, char _separator)
+			:rest(_s), separator(_separator) {
+			Next();
+		}
+
+		constexpr Iterator(std::nullptr_t n)
+			:current(n), rest(n), separator(0) {}
+
+		void Next() {
+			if (rest.IsNull())
+				current = nullptr;
+			else {
+				const char *i = rest.Find(separator);
+				if (i == nullptr) {
+					current = rest;
+					rest.data = nullptr;
+				} else {
+					current.data = rest.data;
+					current.size = i - current.data;
+					rest.size -= current.size + 1;
+					rest.data = i + 1;
+				}
+			}
+		}
+
+	public:
+		typedef std::forward_iterator_tag iterator_category;
+
+		Iterator &operator++() {
+			Next();
+			return *this;
+		}
+
+		constexpr bool operator==(Iterator other) const {
+			return current.data == other.current.data;
+		}
+
+		constexpr bool operator!=(Iterator other) const {
+			return !(*this == other);
+		}
+
+		constexpr StringView operator*() const {
+			return current;
+		}
+
+		constexpr const StringView *operator->() const {
+			return &current;
+		}
+	};
+
+	typedef Iterator iterator;
+	typedef Iterator const_iterator;
+
+	const_iterator begin() const {
+		return {s, separator};
+	}
+
+	constexpr const_iterator end() const {
+		return {nullptr};
+	}
+};
+
+#endif
diff -urN mpd-0.19.21/src/util/MimeType.cxx build/src/util/MimeType.cxx
--- /dev/null	2017-01-18 08:56:36.062209554 +0100
+++ build/src/util/MimeType.cxx	2017-01-26 18:59:14.171072801 +0100
@@ -0,0 +1,53 @@
+/*
+ * Copyright 2003-2017 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "MimeType.hxx"
+#include "SplitString.hxx"
+
+#include <string.h>
+
+std::string
+GetMimeTypeBase(const char *s)
+{
+	const char *semicolon = strchr(s, ';');
+	return semicolon != nullptr
+		? std::string(s, semicolon)
+		: std::string(s);
+}
+
+std::map<std::string, std::string>
+ParseMimeTypeParameters(const char *s)
+{
+	std::map<std::string, std::string> result;
+
+	auto l = SplitString2(s, ';', true);
+	if (!l.empty())
+		l.pop_front();
+
+	for (const auto &i : l) {
+		const auto eq = i.find('=');
+		if (eq == i.npos)
+			continue;
+
+		result.insert(std::make_pair(std::string(&i.front(), eq),
+					     std::string(&i[eq + 1])));
+	}
+
+	return result;
+}
diff -urN mpd-0.19.21/src/util/MimeType.hxx build/src/util/MimeType.hxx
--- /dev/null	2017-01-18 08:56:36.062209554 +0100
+++ build/src/util/MimeType.hxx	2017-01-26 18:43:02.699834405 +0100
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2003-2017 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef MPD_MIME_TYPE_HXX
+#define MPD_MIME_TYPE_HXX
+
+#include <string>
+#include <map>
+
+/**
+ * Extract the part of the MIME type before the parameters, i.e. the
+ * part before the semicolon.  If there is no semicolon, it returns
+ * the string as-is.
+ */
+std::string
+GetMimeTypeBase(const char *s);
+
+/**
+ * Parse the parameters from a MIME type string.  Parameters are
+ * separated by semicolon.  Example:
+ *
+ * "foo/bar; param1=value1; param2=value2"
+ */
+std::map<std::string, std::string>
+ParseMimeTypeParameters(const char *s);
+
+#endif
diff -urN mpd-0.19.21/src/util/SplitString.cxx build/src/util/SplitString.cxx
--- mpd-0.19.21/src/util/SplitString.cxx	2016-07-29 10:01:52.000000000 +0200
+++ build/src/util/SplitString.cxx	2017-01-26 18:57:10.291678288 +0100
@@ -1,26 +1,65 @@
 /*
- * Copyright (C) 2003-2014 The Music Player Daemon Project
- * http://www.musicpd.org
+ * Copyright (C) 2013-2016 Max Kellermann <max.kellermann@gmail.com>
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
  *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
  *
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "SplitString.hxx"
+#include "IterableSplitString.hxx"
+#include "StringUtil.hxx"
 
 #include <string.h>
 
+std::forward_list<std::string>
+SplitString2(const char *s, char separator, bool strip)
+{
+	if (strip)
+		s = StripLeft(s);
+
+	std::forward_list<std::string> list;
+	if (*s == 0)
+		return list;
+
+	auto i = list.before_begin();
+
+	for (auto value : IterableSplitString(s, separator)) {
+		const char *begin = value.begin(), *end = value.end();
+
+		if (strip) {
+			begin = StripLeft(begin, end);
+			end = StripRight(begin, end);
+		}
+
+		i = list.emplace_after(i, begin, end);
+	}
+
+	return list;
+}
+
+
 SplitString::SplitString(const char *s, char separator)
 	:first(nullptr)
 {
diff -urN mpd-0.19.21/src/util/SplitString.hxx build/src/util/SplitString.hxx
--- mpd-0.19.21/src/util/SplitString.hxx	2016-07-29 10:01:52.000000000 +0200
+++ build/src/util/SplitString.hxx	2017-01-26 19:01:14.914483099 +0100
@@ -1,25 +1,37 @@
 /*
- * Copyright (C) 2003-2014 The Music Player Daemon Project
- * http://www.musicpd.org
+ * Copyright (C) 2013-2016 Max Kellermann <max.kellermann@gmail.com>
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#ifndef MPD_SPLIT_STRING_HXX
-#define MPD_SPLIT_STRING_HXX
+#ifndef SPLIT_STRING_HXX
+#define SPLIT_STRING_HXX
 
+#include <forward_list>
+#include <string>
 #include "Compiler.h"
 
 #include <assert.h>
@@ -68,4 +80,17 @@
 	}
 };
 
+/**
+ * Split a string at a certain separator character into sub strings
+ * and returns a list of these.
+ *
+ * Two consecutive separator characters result in an empty string in
+ * the list.
+ *
+ * An empty input string, as a special case, results in an empty list
+ * (and not a list with an empty string).
+ */
+std::forward_list<std::string>
+SplitString2(const char *s, char separator, bool strip=true);
+
 #endif
diff -urN mpd-0.19.21/src/util/StringView.cxx build/src/util/StringView.cxx
--- /dev/null	2017-01-18 08:56:36.062209554 +0100
+++ build/src/util/StringView.cxx	2017-01-26 18:51:01.825482025 +0100
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2013-2015 Max Kellermann <max.kellermann@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "StringView.hxx"
+#include "CharUtil.hxx"
+
+void
+StringView::StripLeft()
+{
+	while (!IsEmpty() && IsWhitespaceOrNull(front()))
+		pop_front();
+}
+
+void
+StringView::StripRight()
+{
+	while (!IsEmpty() && IsWhitespaceOrNull(back()))
+		pop_back();
+}
diff -urN mpd-0.19.21/src/util/StringView.hxx build/src/util/StringView.hxx
--- /dev/null	2017-01-18 08:56:36.062209554 +0100
+++ build/src/util/StringView.hxx	2017-01-26 18:51:01.825482025 +0100
@@ -0,0 +1,133 @@
+/*
+ * Copyright (C) 2013-2015 Max Kellermann <max.kellermann@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * - Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ *
+ * - Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the
+ * distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
+ * FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+ * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef STRING_VIEW_HXX
+#define STRING_VIEW_HXX
+
+#include "ConstBuffer.hxx"
+
+#include <string.h>
+
+struct StringView : ConstBuffer<char> {
+	StringView() = default;
+
+	constexpr StringView(pointer_type _data, size_type _size)
+		:ConstBuffer<char>(_data, _size) {}
+
+	constexpr StringView(pointer_type _begin, pointer_type _end)
+		:ConstBuffer<char>(_begin, _end - _begin) {}
+
+	StringView(pointer_type _data)
+		:ConstBuffer<char>(_data,
+				   _data != nullptr ? strlen(_data) : 0) {}
+
+	constexpr StringView(std::nullptr_t n)
+		:ConstBuffer<char>(n) {}
+
+	static constexpr StringView Empty() {
+		return StringView("", size_t(0));
+	}
+
+	template<size_t n>
+	static constexpr StringView Literal(const char (&_data)[n]) {
+		static_assert(n > 0, "");
+		return {_data, n - 1};
+	}
+
+	static constexpr StringView Literal() {
+		return StringView("", size_t(0));
+	}
+
+	void SetEmpty() {
+		data = "";
+		size = 0;
+	}
+
+	gcc_pure
+	pointer_type Find(char ch) const {
+		return (pointer_type)memchr(data, ch, size);
+	}
+
+	StringView &operator=(std::nullptr_t) {
+		data = nullptr;
+		size = 0;
+		return *this;
+	}
+
+	StringView &operator=(pointer_type _data) {
+		data = _data;
+		size = _data != nullptr ? strlen(_data) : 0;
+		return *this;
+	}
+
+	gcc_pure
+	bool StartsWith(StringView needle) const {
+		return size >= needle.size &&
+			memcmp(data, needle.data, needle.size) == 0;
+	}
+
+	gcc_pure
+	bool Equals(StringView other) const {
+		return size == other.size &&
+			memcmp(data, other.data, size) == 0;
+	}
+
+	template<size_t n>
+	bool EqualsLiteral(const char (&other)[n]) const {
+		return Equals(Literal(other));
+	}
+
+	gcc_pure
+	bool EqualsIgnoreCase(StringView other) const {
+		return size == other.size &&
+			strncasecmp(data, other.data, size) == 0;
+	}
+
+	template<size_t n>
+	bool EqualsLiteralIgnoreCase(const char (&other)[n]) const {
+		return EqualsIgnoreCase(Literal(other));
+	}
+
+	/**
+	 * Skip all whitespace at the beginning.
+	 */
+	void StripLeft();
+
+	/**
+	 * Skip all whitespace at the end.
+	 */
+	void StripRight();
+
+	void Strip() {
+		StripLeft();
+		StripRight();
+	}
+};
+
+#endif
